{"version":3,"sources":["Web3Client.js","DiplayOneNFT.js","MintOneNFT.js","CreateMarketplaceItem.js","DisplayMarketItems.js","DiplayMyNFTS.js","App.js","reportWebVitals.js","index.js"],"names":["selectedAccount","nftContract","marketContract","web3","NFT_ADDR","nft_addr","CONTRACT_ADDRESS","MARKET_ADDR","market_addr","init","a","provider","window","ethereum","Web3","eth","Contract","nft_abi","abi","market_abi","on","accounts","console","log","request","method","then","catch","err","getSelectedAccount","getSelectedAccountsNftBalance","methods","balanceOf","call","mint","tokenURI","createToken","send","from","weiToEther","price","utils","fromWei","getTokenUri","tokenId","getOwnerOf","ownerOf","createMarketItem","p","toWei","value","buyNft","createMarketSale","fetchMarketItems","DisplayOneNFT","props","handleInputChange","event","target","type","files","name","setState","findByTokenId","state","res","getJsonAsync","jm","tokenMetadata","JSON","stringify","tokenUri","image","tokenOwner","preventDefault","url","fetch","response","json","responseJson","error","Panel","header","bordered","onSubmit","this","required","onChange","Button","color","appearance","style","src","width","height","alt","React","Component","ipfs","create","MintOneNFT","updateNftBalance","balance","selectedAccountsNftBalance","parseInt","changeHandler","uploadedFile","handleSubmit","add","nft_asset","asset_res","nft_name","description","nft_description","path","metadata_res","ipfs_path","acc","lastTokenId","CreateMarketplaceItem","createItem","newID","events","Transfer","returnValues","step","DisplayMarketItems","itemsSetUp","data","Promise","all","map","i","meta","toString","item","itemId","seller","owner","items","marketItems","marketGalery","nft","thumbnail","thumbnailWidth","thumbnailHeight","caption","id","cols","rows","gap","loop","Item","tokensQuery","client","ApolloClient","uri","cache","InMemoryCache","DiplayMyNFTS","query","gql","data2","selectedAddr","user","users","filter","userTokens","undefined","tokens","contentURI","nfts","myNfts","styles","padding","textAlign","App","fetchNftGraph","bind","handleMarketNftsChange","marketNFTs","className","onMarketNftsChange","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d699b759.chunk.js","sourcesContent":["// import NFTContractBuild from 'contracts/NFT.json';\nimport Web3 from \"web3\";\nimport nft_abi from \"./abi/NFT.json\";\nimport market_abi from \"./abi/NFTMarket.json\";\nimport nft_addr from \"./addresses/nft.address.json\";\nimport market_addr from \"./addresses/market.address.json\";\n\nconst NFT_ADDR = nft_addr.CONTRACT_ADDRESS;\nconst MARKET_ADDR = market_addr.CONTRACT_ADDRESS;\n\nlet selectedAccount;\n// let nftContract;\nlet nftContract;\nlet marketContract;\nlet web3;\n\nexport const init = async () => {\n  let provider = window.ethereum;\n\n  web3 = new Web3(provider);\n\n  nftContract = new web3.eth.Contract(nft_abi.abi, NFT_ADDR);\n  marketContract = new web3.eth.Contract(market_abi.abi, MARKET_ADDR);\n\n  if (typeof provider !== \"undefined\") {\n    window.ethereum.on(\"accountsChanged\", function (accounts) {\n      selectedAccount = accounts[0];\n      console.log(`Selected account changed to ${selectedAccount}`);\n    });\n    return await provider\n      .request({ method: \"eth_requestAccounts\" })\n      .then((accounts) => {\n        selectedAccount = accounts[0];\n        console.log(`Selected account is ${selectedAccount}`);\n      })\n      .catch((err) => {\n        console.log(err);\n        return;\n      });\n  }\n};\n\nexport const getSelectedAccount = async () => {\n  return selectedAccount;\n};\nexport const getSelectedAccountsNftBalance = async () => {\n  return await nftContract.methods.balanceOf(selectedAccount).call();\n};\n\nexport const mint = async (tokenURI) => {\n  console.log(tokenURI);\n  return await nftContract.methods\n    .createToken(\"https://ipfs.io/ipfs/\" + tokenURI)\n    .send({ from: selectedAccount });\n};\n\nexport const weiToEther = async (price) => {\n  return await web3.utils.fromWei(price);\n};\n\nexport const getTokenUri = async (tokenId) => {\n  return await nftContract.methods.tokenURI(tokenId).call();\n};\n\nexport const getOwnerOf = async (tokenId) => {\n  return await nftContract.methods.ownerOf(tokenId).call();\n};\n\nexport const createMarketItem = async (tokenId, p) => {\n  let price = await web3.utils.toWei(p);\n  return await marketContract.methods\n    .createMarketItem(NFT_ADDR, tokenId, price)\n    .send({ from: selectedAccount, value: 25000000000000000 });\n};\n\nexport const buyNft = async (tokenId, price) => {\n  let value = await web3.utils.toWei(price);\n  return await marketContract.methods\n    .createMarketSale(NFT_ADDR, tokenId)\n    .send({ from: selectedAccount, value });\n};\n\nexport const fetchMarketItems = async () => {\n  return await marketContract.methods.fetchMarketItems().call();\n};\nexport const fetchMyNFTs = async () => {\n  return await marketContract.methods.fetchItemsCreated().call();\n};\n","import React from \"react\";\nimport { Panel } from \"rsuite\";\nimport { Button } from \"rsuite\";\n\nimport { getTokenUri, getOwnerOf } from \"./Web3Client\";\n\nexport class DisplayOneNFT extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tokenId: null,\n      tokenMetadata: null,\n      tokenUri: null,\n      tokenOwner: null,\n    };\n  }\n\n  handleInputChange = (event) => {\n    //TODO export it from upstream to remove code duplication\n    const target = event.target;\n    const value = target.type === \"file\" ? target.files[0] : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  getJsonAsync(url) {\n    return fetch(url)\n      .then((response) => response.json())\n      .then((responseJson) => {\n        return responseJson;\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }\n\n  findByTokenId = (event) => {\n    getTokenUri(this.state.tokenId).then((res) => {\n      this.getJsonAsync(res).then((jm) =>\n        this.setState({\n          tokenMetadata: JSON.stringify(jm),\n          tokenUri: jm.image,\n        })\n      );\n    });\n    getOwnerOf(this.state.tokenId).then((res) => {\n      this.setState({\n        tokenOwner: res,\n      });\n    });\n    event.preventDefault();\n  };\n\n  render() {\n    return (\n      <Panel header=\"Display NFT by TokenId\" bordered>\n        <div>\n          <form onSubmit={this.findByTokenId}>\n            <p>\n              <label>\n                Token id:\n                <input\n                  type=\"text\"\n                  required\n                  name=\"tokenId\"\n                  onChange={this.handleInputChange}\n                />\n              </label>\n            </p>\n            <Button\n              color=\"red\"\n              appearance=\"primary\"\n              type=\"submit\"\n              value=\"Mint NFT\"\n            >\n              Find\n            </Button>\n          </form>\n        </div>\n        {this.state.tokenMetadata == null ? (\n          \"\"\n        ) : (\n          <div>\n            <p style={{ color: \"green\" }}>\n              NFT metadata : {this.state.tokenMetadata}\n            </p>\n            <p>Owner : {this.state.tokenOwner}</p>\n            <p>\n              <img\n                src={this.state.tokenUri}\n                width=\"300px\"\n                height=\"300px\"\n                alt=\"new\"\n              />\n            </p>\n          </div>\n        )}\n      </Panel>\n    );\n  }\n}\n","import React from \"react\";\nimport { Panel } from \"rsuite\";\nimport { Button } from \"rsuite\";\nimport { create } from \"ipfs-http-client\";\n\nimport {\n  mint,\n  getSelectedAccount,\n  getSelectedAccountsNftBalance,\n} from \"./Web3Client\";\nconst ipfs = create(\"https://ipfs.infura.io:5001\");\n\nexport class MintOneNFT extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nft_name: null,\n      nft_asset: null,\n      nft_description: null,\n      selectedAccount: null,\n      uploadedFile: null,\n      ipfs_path: null,\n\n      selectedAccountsNftBalance: 0,\n    };\n  }\n  updateNftBalance = () => {\n    getSelectedAccountsNftBalance().then((balance) => {\n      this.setState({ selectedAccountsNftBalance: parseInt(balance) });\n    });\n  };\n\n  componentDidMount() {\n    getSelectedAccount()\n      .then((acc) => {\n        this.setState({ selectedAccount: acc });\n      })\n      .then(() => this.updateNftBalance());\n  }\n\n  changeHandler = (event) => {\n    this.setState({ uploadedFile: event.target.files[0] });\n  };\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === \"file\" ? target.files[0] : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    ipfs.add(this.state.nft_asset).then((asset_res) => {\n      var json = {\n        name: this.state.nft_name,\n        description: this.state.nft_description,\n        image: \"https://ipfs.io/ipfs/\" + asset_res.path,\n      };\n      ipfs.add(JSON.stringify(json)).then((metadata_res) => {\n        this.setState({ ipfs_path: metadata_res.path });\n        mint(metadata_res.path).then((res) => {\n         \n          this.updateNftBalance();\n        });\n      });\n    });\n\n    event.preventDefault();\n  };\n\n  render() {\n    return (\n      <Panel header=\"Mint a new NFT\" bordered>\n        <p>Current connected account :{this.state.selectedAccount} </p>\n        <p>\n          Current accounts nft balance :{this.state.selectedAccountsNftBalance}\n        </p>\n        <p>Last ipfs path :{this.state.ipfs_path} </p>\n        <p>Last token id :{this.state.lastTokenId} </p>\n\n        <div>\n          <form onSubmit={this.handleSubmit}>\n            <p>\n              <label>Name:</label>\n              <input\n                type=\"text\"\n                required\n                name=\"nft_name\"\n                onChange={this.handleInputChange}\n              />\n            </p>\n            <p>\n              <label>\n                Description:\n                <input\n                  type=\"text\"\n                  required\n                  name=\"nft_description\"\n                  onChange={this.handleInputChange}\n                />\n              </label>\n            </p>\n            <p>\n              <label>\n                File to mint:\n                <input\n                  type=\"file\"\n                  required\n                  name=\"nft_asset\"\n                  onChange={this.handleInputChange}\n                />\n              </label>\n            </p>\n            <div>\n              <Button\n                color=\"violet\"\n                appearance=\"primary\"\n                type=\"submit\"\n                value=\"Mint NFT\"\n              >\n                Mint\n              </Button>\n            </div>\n          </form>\n        </div>\n      </Panel>\n    );\n  }\n}\n","import React from \"react\";\nimport { Panel } from \"rsuite\";\nimport { Button } from \"rsuite\";\nimport { create } from \"ipfs-http-client\";\n\nimport {\n  mint,\n  init,\n  getSelectedAccount,\n  getSelectedAccountsNftBalance,\n  createMarketItem,\n} from \"./Web3Client\";\n\nconst ipfs = create(\"http://ipfs.infura.io:5001\");\n\nexport class CreateMarketplaceItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nft_name: null,\n      nft_asset: null,\n      nft_description: null,\n      price: 0,\n      selectedAccount: null,\n      uploadedFile: null,\n      ipfs_path: null,\n      selectedAccountsNftBalance: 0,\n    };\n  }\n  updateNftBalance = () => {\n    getSelectedAccountsNftBalance().then((balance) => {\n      this.setState({ selectedAccountsNftBalance: parseInt(balance) });\n    });\n  };\n  componentDidMount() {\n    init()\n      .then(() => {\n        getSelectedAccount()\n          .then((acc) => {\n            this.setState({ selectedAccount: acc });\n          })\n          .then(() => this.updateNftBalance());\n      })\n      .catch(() => console.log(\"Failed to initialize.\"));\n  }\n\n  changeHandler = (event) => {\n    this.setState({ uploadedFile: event.target.files[0] });\n  };\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === \"file\" ? target.files[0] : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  createItem = (event) => {\n    ipfs.add(this.state.nft_asset).then((asset_res) => {\n      var json = {\n        name: this.state.nft_name,\n        description: this.state.nft_description,\n        image: \"https://ipfs.io/ipfs/\" + asset_res.path,\n      };\n      ipfs.add(JSON.stringify(json)).then((metadata_res) => {\n        this.setState({ ipfs_path: metadata_res.path });\n        mint(metadata_res.path).then((res) => {\n          let newID = res.events.Transfer.returnValues[2];\n          createMarketItem(newID,  this.state.price);\n\n          this.updateNftBalance();\n        });\n      });\n    });\n\n    event.preventDefault();\n  };\n\n  render() {\n    return (\n      <Panel header=\"Create marketplace item\" bordered>\n        <p>Current connected account :{this.state.selectedAccount} </p>\n\n        <div>\n          <form onSubmit={this.createItem}>\n            <p>\n              <label>Name:</label>\n              <input\n                type=\"text\"\n                required\n                name=\"nft_name\"\n                onChange={this.handleInputChange}\n              />\n            </p>\n            <p>\n              <label>\n                Description:\n                <input\n                  type=\"text\"\n                  required\n                  name=\"nft_description\"\n                  onChange={this.handleInputChange}\n                />\n              </label>\n            </p>\n            <p>\n              <label>\n                Price:\n                <input\n                  type=\"number\"\n                  required\n                  step=\"0.000001\"\n                  name=\"price\"\n                  onChange={this.handleInputChange}\n                />\n              </label>\n            </p>\n            <p>\n              <label>\n                File to mint:\n                <input\n                  type=\"file\"\n                  required\n                  name=\"nft_asset\"\n                  onChange={this.handleInputChange}\n                />\n              </label>\n            </p>\n\n            <div>\n              <Button\n                color=\"violet\"\n                appearance=\"primary\"\n                type=\"submit\"\n                value=\"Mint NFT\"\n              >\n                Create Market\n              </Button>\n            </div>\n          </form>\n        </div>\n      </Panel>\n    );\n  }\n}\n","import React from \"react\";\nimport { Panel } from \"rsuite\";\nimport Carousel from \"react-grid-carousel\";\n\nimport {\n  getTokenUri,\n  fetchMarketItems,\n  weiToEther,\n  buyNft,\n} from \"./Web3Client\";\n\nexport class DisplayMarketItems extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tokenId: null,\n      tokenMetadata: null,\n      tokenUri: null,\n      tokenOwner: null,\n      marketItems: null,\n      marketGalery: null,\n    };\n  }\n\n  componentDidMount() {\n    this.itemsSetUp().then(() => {\n      let items = this.state.marketItems.map((nft) => {\n        let i = {\n          src: nft.image,\n          thumbnail: nft.image,\n          thumbnailWidth: 320,\n          thumbnailHeight: 212,\n          caption: \"<p>\" + nft.name + \"</p><p>\" + nft.description + \"</p>\",\n        };\n        return i;\n      });\n      this.setState({ marketGalery: items });\n    });\n  }\n\n  getJsonAsync(url) {\n    return fetch(url)\n      .then((response) => response.json())\n      .then((responseJson) => {\n        return responseJson;\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }\n\n  itemsSetUp = async () => {\n    let data = await fetchMarketItems();\n    const items = await Promise.all(\n      data.map(async (i) => {\n        const tokenUri = await getTokenUri(i.tokenId);\n        const meta = await this.getJsonAsync(tokenUri);\n        let price = await weiToEther(i.price.toString());\n        let item = {\n          price,\n          tokenId: i.tokenId,\n          itemId: i.itemId,\n          seller: i.seller,\n          owner: i.owner,\n          image: meta.image,\n          name: meta.name,\n          description: meta.description,\n        };\n        return item;\n      })\n    );\n    this.setState({ marketItems: items });\n  };\n\n  handleInputChange = (event) => {\n    //TODO export it from upstream to remove code duplication\n    const target = event.target;\n    const value = target.type === \"file\" ? target.files[0] : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit(event) {\n    let id = event.target[0].value;\n    let price = event.target[1].value;\n    buyNft(id, price);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <Panel header=\"NFTs on sale:\" bordered>\n        <div>\n          {this.state.marketItems != null ? (\n            <Carousel cols={4} rows={1} gap={0} loop>\n              {this.state.marketItems.map((nft, i) => (\n                <Carousel.Item key={i}>\n                  <img src={nft.image} width=\"50%\" alt=\"\" />\n                  <p>Name : {nft.name}</p>\n                  <p>Description : {nft.description}</p>\n                  <p>tokenId : {nft.tokenId}</p>\n                  <p>itemId : {nft.itemId}</p>\n                  <p>Price : {nft.price} AVAX</p>\n                  <form onSubmit={this.handleSubmit}>\n                    <input type=\"hidden\" name=\"itemId\" value={nft.itemId} />\n                    <input type=\"hidden\"  name=\"price\" value={nft.price}  />\n                    <input type=\"submit\" value=\"Buy\" />\n                  </form>\n                </Carousel.Item>\n              ))}\n            </Carousel>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </Panel>\n    );\n  }\n}\n\n/*\n<div>\n          <form onSubmit={this.findByTokenId}>\n            <p>\n              <label>\n                Token id:\n                <input\n                  type=\"text\"\n                  required\n                  name=\"tokenId\"\n                  onChange={this.handleInputChange}\n                />\n              </label>\n            </p>\n            <Button\n              color=\"red\"\n              appearance=\"primary\"\n              type=\"submit\"\n              value=\"Mint NFT\"\n            >\n              Find\n            </Button>\n          </form>\n        </div>\n        {this.state.tokenMetadata == null ? (\n          \"\"\n        ) : (\n          <div>\n            <p style={{ color: \"green\" }}>\n              NFT metadata : {this.state.tokenMetadata}\n            </p>\n            <p>Owner : {this.state.tokenOwner}</p>\n            <p>\n              <img\n                src={this.state.tokenUri}\n                width=\"300px\"\n                height=\"300px\"\n                alt=\"new\"\n              />\n            </p>\n          </div>\n        )}\n\n\n        <Carousel cols={2} rows={1} gap={10} loop>\n            <Carousel.Item>\n              <img width=\"100%\" src=\"https://picsum.photos/800/600?random=1\" />\n            </Carousel.Item>\n            <Carousel.Item>\n              <img width=\"100%\" src=\"https://picsum.photos/800/600?random=2\" />\n            </Carousel.Item>\n            <Carousel.Item>\n              <img width=\"100%\" src=\"https://picsum.photos/800/600?random=3\" />\n              <p>Lol</p>\n            </Carousel.Item>\n           \n          </Carousel>\n\n\n        */\n","import React from \"react\";\nimport { Panel } from \"rsuite\";\nimport Carousel from \"react-grid-carousel\";\nimport { ApolloClient, InMemoryCache, gql } from \"@apollo/client\";\nimport { createMarketItem, getSelectedAccount } from \"./Web3Client\";\n\nconst APIURL =\n  \"https://api.thegraph.com/subgraphs/name/arozovyk/nftmarketplace\";\n\nconst tokensQuery = `\n  query {\n    users {\n      id\n      tokens {\n        id\n        contentURI\n      }\n    }\n  }\n`;\nconst client = new ApolloClient({\n  uri: APIURL,\n  cache: new InMemoryCache(),\n});\nexport class DiplayMyNFTS extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      marketItems: null,\n      marketGalery: null,\n    };\n  }\n\n  componentDidMount() {\n    this.itemsSetUp().then(() => {\n      let items = this.state.marketItems.map((nft) => {\n        let i = {\n          src: nft.image,\n          thumbnail: nft.image,\n          thumbnailWidth: 320,\n          thumbnailHeight: 212,\n          caption: \"<p>\" + nft.name + \"</p><p>\" + nft.description + \"</p>\",\n        };\n        return i;\n      });\n      this.setState({ marketGalery: items });\n    });\n    client.query({\n      query: gql(tokensQuery),\n    });\n  }\n\n  getJsonAsync(url) {\n    return fetch(url)\n      .then((response) => response.json())\n      .then((responseJson) => {\n        return responseJson;\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }\n\n  itemsSetUp = async () => {\n    let data2 = await client.query({\n      query: gql(tokensQuery),\n    });\n    let selectedAddr = await getSelectedAccount();\n    var user = data2.data.users.filter((user) => {\n      console.log(user.id + \"is id \");\n      console.log(selectedAddr + \"is selected \");\n      return user.id === selectedAddr;\n    })[0];\n    let userTokens = user === undefined ? [] : user.tokens;\n\n    const items = await Promise.all(\n      userTokens.map(async (i) => {\n        const tokenUri = i.contentURI;\n        const meta = await this.getJsonAsync(tokenUri);\n        let item = {\n          tokenId: i.id,\n          owner: selectedAddr,\n          image: meta.image,\n          name: meta.name,\n          description: meta.description,\n        };\n        return item;\n      })\n    );\n    this.setState({ marketItems: items });\n  };\n\n  handleInputChange = (event) => {\n    //TODO export it from upstream to remove code duplication\n    const target = event.target;\n    const value = target.type === \"file\" ? target.files[0] : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit(event) {\n    let id = event.target[0].value;\n    let price = event.target[1].value;\n    createMarketItem(id, price);\n    event.preventDefault();\n  }\n\n  render() {\n    const nfts = this.props.myNfts;\n    return (\n      <Panel header=\"My NFTs:\" bordered>\n        <div>\n          {nfts != null ? (\n            <Carousel cols={4} rows={1} gap={0} loop>\n              {nfts.map((nft, i) => (\n                <Carousel.Item key={i}>\n                  <img src={nft.image} width=\"50%\" alt=\"\" />\n                  <p>Name : {nft.name}</p>\n                  <p>Description : {nft.description}</p>\n                  <p>tokenId : {nft.tokenId}</p>\n                  <form onSubmit={this.handleSubmit}>\n                    <input type=\"hidden\" name=\"tokenID\" value={nft.tokenId} />\n                    <input\n                      type=\"number\"\n                      step=\"0.1\"\n                      name=\"price\"\n                      value={nft.price}\n                    />\n                    <input type=\"submit\" value=\"Sell\" />\n                  </form>\n                </Carousel.Item>\n              ))}\n            </Carousel>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </Panel>\n    );\n  }\n}\n\n/*\n<div>\n          <form onSubmit={this.findByTokenId}>\n            <p>\n              <label>\n                Token id:\n                <input\n                  type=\"text\"\n                  required\n                  name=\"tokenId\"\n                  onChange={this.handleInputChange}\n                />\n              </label>\n            </p>\n            <Button\n              color=\"red\"\n              appearance=\"primary\"\n              type=\"submit\"\n              value=\"Mint NFT\"\n            >\n              Find\n            </Button>\n          </form>\n        </div>\n        {this.state.tokenMetadata == null ? (\n          \"\"\n        ) : (\n          <div>\n            <p style={{ color: \"green\" }}>\n              NFT metadata : {this.state.tokenMetadata}\n            </p>\n            <p>Owner : {this.state.tokenOwner}</p>\n            <p>\n              <img\n                src={this.state.tokenUri}\n                width=\"300px\"\n                height=\"300px\"\n                alt=\"new\"\n              />\n            </p>\n          </div>\n        )}\n        <Carousel cols={2} rows={1} gap={10} loop>\n            <Carousel.Item>\n              <img width=\"100%\" src=\"https://picsum.photos/800/600?random=1\" />\n            </Carousel.Item>\n            <Carousel.Item>\n              <img width=\"100%\" src=\"https://picsum.photos/800/600?random=2\" />\n            </Carousel.Item>\n            <Carousel.Item>\n              <img width=\"100%\" src=\"https://picsum.photos/800/600?random=3\" />\n              <p>Lol</p>\n            </Carousel.Item>\n          </Carousel>\n        */\n","import React from \"react\";\n\nimport { DisplayOneNFT } from \"./DiplayOneNFT\";\nimport { MintOneNFT } from \"./MintOneNFT\";\nimport { CreateMarketplaceItem } from \"./CreateMarketplaceItem\";\nimport { DisplayMarketItems } from \"./DisplayMarketItems\";\nimport { DiplayMyNFTS } from \"./DiplayMyNFTS\";\nimport { ApolloClient, InMemoryCache, gql } from \"@apollo/client\";\nimport { getSelectedAccount } from \"./Web3Client\";\nimport \"rsuite/dist/rsuite.min.css\";\n\nconst APIURL =\n  \"https://api.thegraph.com/subgraphs/name/arozovyk/nftmarketplace\";\n\nconst tokensQuery = `\n  query {\n    users {\n      id\n      tokens {\n        id\n        contentURI\n      }\n    }\n  }\n`;\nconst client = new ApolloClient({\n  uri: APIURL,\n  cache: new InMemoryCache(),\n});\n\n//import { render } from \"react-dom\";\n//import { AgGridColumn, AgGridReact } from \"ag-grid-react\";\n\nconst styles = {\n  padding: 20,\n  textAlign: \"left\",\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.fetchNftGraph = this.fetchNftGraph.bind(this);\n    this.handleMarketNftsChange = this.handleMarketNftsChange.bind(this);\n    this.state = { myNfts: null, marketNFTs: null };\n  }\n\n  fetchNftGraph = async () => {\n    let data2 = await client.query({\n      query: gql(tokensQuery),\n    });\n    let selectedAddr = await getSelectedAccount();\n    var acc = data2.data.users.filter((user) => {\n      return user.id === selectedAddr;\n    })[0];\n    let userTokens = acc !== undefined ? acc.tokens : [];\n\n    const items = await Promise.all(\n      userTokens.map(async (i) => {\n        const tokenUri = i.contentURI;\n        const meta = await this.getJsonAsync(tokenUri);\n        let item = {\n          tokenId: i.id,\n          owner: selectedAddr,\n          image: meta.image,\n          name: meta.name,\n          description: meta.description,\n        };\n        return item;\n      })\n    );\n    this.setState({ myNfts: items });\n    return;\n  };\n\n  getJsonAsync(url) {\n    return fetch(url)\n      .then((response) => response.json())\n      .then((responseJson) => {\n        return responseJson;\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }\n\n  handleMarketNftsChange(marketNFTs) {\n    this.setState({ marketNFTs });\n  }\n \n\n  componentDidMount() {\n    this.fetchNftGraph()\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <div style={styles}>\n          <DiplayMyNFTS myNfts={this.state.myNfts} />\n          <MintOneNFT />\n          <DisplayOneNFT />\n          <CreateMarketplaceItem\n            onMarketNftsChange={this.handleMarketNftsChange}\n          />\n          <DisplayMarketItems\n            onMarketNftsChange={this.handleMarketNftsChange}\n            marketNFTs={this.state.marketNFTs}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { init } from \"./Web3Client\";\n\ninit().then(() => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n});\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}